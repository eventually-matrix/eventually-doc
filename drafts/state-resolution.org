Based loosely on [[https://github.com/matrix-org/matrix-doc/blob/c7c08eaf0f66510ba8c781b183e60aa3a1ce5bf9/drafts/erikj_federation.rst#state-resolution]["Erik's draft"]].

* Room state
  # deliberately vague
  While a room may in general have a lot of state associated with it,
  only a certain subset of that state is relevant to federation,
  and this document will generally restrict itself to considering that subset.
* Authorization
** Auth state
   The auth (short for authorization) state is
   the subset of the room state
   upon which the validity of future events may rely.
   # DISCUSS the official documentation uses "authorization" where validity is used here
   For example,
   during a time where a user is banned from a room,
   messages from that user to that room are invalid.
** Auth events
   An auth (short for authorization) event is an event that changes any part of the auth state.
** Auth rules
   The auth rules determine,
   for a given auth state,
   whether a given auth event represents a valid change.
   For the current auth rules,
   see [[https://matrix.org/docs/spec/server_server/unstable.html#rules][the official spec]].
   # TODO change this to most recent stable spec once one is released
* State resolution
  Given that the Matrix history model is a DAG rather than a linear list,
  disagreement may occur when the DAG has more than one source
  (considering arrows to go from later events to earlier ones).
  As the simplest example, consider the following DAG,
  noting again that history follows the direction of the arrows:
  
  [[./images/state-resolution-simple.svg]]
  
  Here, the B and C nodes are both sources.
  If B and C are conflicting state events,
  what is the state when sending D?
  That is what state resolution answers.
** The desired properties
   # First 3 properties are taken directly from Erik's draft for now
    1. Must only depend on the event graph, and not local server state.
    2. When two state events are comparable, the descendant one should be picked.
    3. Must not require the full event graph.
       # DISCUSS What then? How much of the event graph can it require?
       # Consider that you need the full event graph to e.g. determine whether
       # an event is trying to ban someone from a room that actually exists.
       # I (Magnap) suggest that this should be phrased as
       # "must be possible to implement considering only X subset of the event graph"
    4. For any event, when considering the event graph up to but not including it,
       that is, its transitive dependencies
       (the events it depends on directly,
       and the events they depend on, and so forth),
       it must be valid given the state as determined by that graph.
   # TODO talk about partial/total orders,
   # linear extensions, and topological ordering;
   # formalize these properties a bit better.

# TODO define "current state" declaratively
# and maybe also imperatively (i.e. the algorithm)

# DISCUSS does room versioning stuff belong here?
